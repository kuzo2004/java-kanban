package ru.yandex.practicum.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.practicum.entity.*;

import java.util.Map;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {

    private InMemoryTaskManager taskManager;

    @BeforeEach
    public void beforeEach() {
        taskManager = new InMemoryTaskManager();
        taskManager.clearCounterForId();
    }

    @Test
    public void testAddAndFindDifferentTaskTypes() {
        // Создаем задачи разного типа
        Task task = new Task("Task 1", "Description");
        Epic epic = new Epic("Epic 1", "Description");
        Subtask subtask = new Subtask("Subtask 1", "Description", epic);

        // Добавляем задачи в менеджер
        taskManager.addTask(task);
        taskManager.addTask(epic);
        taskManager.addTask(subtask);

        // ищем задачи с нужным типом
        Map<Integer, Task> tasks = taskManager.getAllTasksByType(TaskType.TASK);
        Map<Integer, Task> epics = taskManager.getAllTasksByType(TaskType.EPIC);
        Map<Integer, Task> subtasks = taskManager.getAllTasksByType(TaskType.SUBTASK);

        // проверяем поиск по типам
        assertNotNull(tasks, "Список TASK не пустой.");
        assertEquals(1, tasks.size(), "Список TASK не пустой и равен 1.");

        assertNotNull(epics, "Список EPIC не пустой.");
        assertEquals(1, epics.size(), "Список EPIC не пустой и равен 1.");

        assertNotNull(subtasks, "Список SUBTASK не пустой.");
        assertEquals(1, subtasks.size(), "Список SUBTASK не пустой и равен 1.");


        // ищем задачи по id
        Optional<Task> optionalActualTask = taskManager.getTaskById(task.getId());
        Optional<Task> optionalActualEpic = taskManager.getTaskById(epic.getId());
        Optional<Task> optionalActualSubtask = taskManager.getTaskById(subtask.getId());

        // проверяем поиск по id
        assertTrue(optionalActualTask.isPresent(), "Задача TASK должна быть найдена");
        assertTrue(optionalActualEpic.isPresent(), "Задача EPIC должна быть найдена");
        assertTrue(optionalActualSubtask.isPresent(), "Задача SUBTASK должна быть найдена");
    }

    @Test
    public void testTasksWithManualAndAutoGeneratedIdDoNotConflict() {
        // Создаем задачу с заданным id
        Task taskWithManualId = new Task(100, "Task with manual ID", "Description 100", Status.NEW);
        taskManager.addTask(taskWithManualId);

        // Создаем задачу с автоматически сгенерированным id
        Task taskWithAutoGeneratedId = new Task("Task with auto-generated ID", "Description 2");
        taskManager.addTask(taskWithAutoGeneratedId);

        // Проверяем, что обе задачи добавлены в менеджер
        assertEquals(2, taskManager.getAllTasks().size(), "В менеджере должно быть 2 задачи");

        // Проверяем, что задача с заданным id доступна по этому id
        Optional<Task> optionalFoundTaskWithManualId = taskManager.getTaskById(100);
        assertTrue(optionalFoundTaskWithManualId.isPresent(), "Задача с заданным id должна быть найдена");

        // Проверяем, что задача с автоматически сгенерированным id доступна по своему id
        Optional<Task> optionalFoundTaskWithAutoGeneratedId = taskManager.getTaskById(taskWithAutoGeneratedId.getId());
        assertTrue(optionalFoundTaskWithAutoGeneratedId.isPresent(),
                "Задача с автоматически сгенерированным id должна быть найдена");

        // Проверяем, что id задач не конфликтуют
        assertNotEquals(taskWithManualId.getId(), taskWithAutoGeneratedId.getId(), "ID задач не должны совпадать");
    }

    @Test
    public void testTaskImmutabilityAfterAddingToManager() {
        // Создаем задачу
        Task task = new Task("Task 1", "Description");
        int id = task.getId();
        String name = task.getName();
        String description = task.getDescription();
        Status status = task.getStatus();

        // Добавляем задачу в менеджер
        taskManager.addTask(task);

        // Получаем задачу из менеджера
        Optional<Task> optionalActualTask = taskManager.getTaskById(task.getId());
        assertTrue(optionalActualTask.isPresent(),"Задача с заданным id должна быть найдена");
        Task actualTask = optionalActualTask.get();

        // Проверяем, что все поля задачи остались неизменными
        assertEquals(id, actualTask.getId(), "Id задачи не должен измениться");
        assertEquals(name, actualTask.getName(), "Название задачи не должно измениться");
        assertEquals(description, actualTask.getDescription(), "Описание задачи не должно измениться");
        assertEquals(status, actualTask.getStatus(), "Статус задачи не должен измениться");
    }
}
